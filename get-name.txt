# get_anime app 3.0.1

## Этап 1: Подготовка Таблиц и Структуры Базы Данных
### 1.1 Создание `DatabaseManager` для работы с SQLite
- [x] Выбрать SQLAlchemy как ORM для безопасного и удобного управления базой данных.
- [x] Создать класс `DatabaseManager`, который будет управлять подключением к базе и CRUD-операциями.
- [x] Настроить соединение с базой данных (`anime_player.db`).

### 1.2 Определение Таблиц для Хранения Данных
- [x] Создать таблицу `Titles` для хранения информации о тайтлах.
  - Поля: `title_id`, `name_ru`, `name_en`, `alternative_name`, `poster_path`, `description`, `type`, `episodes_count`, `last_updated`.
- [x] Создать таблицу `Episodes` для хранения информации о сериях.
  - Поля: `episode_id`, `title_id`, `episode_number`, `name`, `hls_fhd`, `hls_hd`, `hls_sd`, `preview_path`, `skips`.
- [x] Создать таблицу `WatchHistory` для отслеживания истории просмотра.
  - Поля: `user_id`, `title_id`, `episode_number`, `is_watched`, `last_watched_at`.
- [x] Создать таблицу `Torrents` для хранения информации о торрентах.
  - Поля: `torrent_id`, `title_id`, `episodes_range`, `quality`, `size_string`, `magnet_link`.
- [x] Создать таблицу `Posters` для хранения постеров.
  - Поля: `poster_id`, `title_id`, `size`, `poster_blob`, `last_updated`.

### 1.3 Реализация Метода Инициализации Базы Данных
- [x] Создать метод `initialize_tables` в `DatabaseManager`, который будет создавать все таблицы при запуске приложения.


## Этап 2: Асинхронное Сохранение Данных после Запроса
### 2.1 Модификация Логики Запросов
- [x] Добавить логику для асинхронного сохранения данных после получения ответа от API.
- [x] Подключить `DatabaseManager` к месту, где выполняются запросы к API, чтобы сохранять полученные данные.

### 2.2 Асинхронное Сохранение Данных
- [x] Реализовать функцию `save_title_async`, которая асинхронно сохраняет данные о тайтлах в базу данных.
- [x] Обновить код для обработки расписания, чтобы после получения JSON сохранять все тайтлы и эпизоды в базу.


## Этап 3: Валидация Данных
### 3.1 Добавление Проверок Перед Сохранением
- [x] Реализовать проверку структуры JSON перед сохранением, чтобы убедиться, что все ключевые поля присутствуют.
- [x] Добавить логику для обработки ошибок при отсутствии необходимых данных.

### 3.2 Использование Pydantic для Валидации
- [ ] Установить Pydantic и создать схемы для валидации данных (`TitleSchema`, `EpisodeSchema` и т.д.).
- [ ] Подключить валидацию к функциям сохранения, чтобы проверять данные перед их записью в базу.


## Этап 4: Хранение Постеров в Базе Данных
### 4.1 Преобразование Постеров в Байты и Сохранение
- [x] Реализовать метод для преобразования постера в байты при загрузке через URL.
- [x] Добавить поле `poster_blob` в таблицу `Posters` для хранения бинарных данных постера.

### 4.2 Логика Кеширования Постеров
- [x] Реализовать метод `get_poster` в `DatabaseManager` для проверки наличия постера в базе данных.
- [x] Если постера нет, загрузить его и сохранить в базе данных.


## Этап 5: Подготовка Нового Интерфейса
### 5.1 Создание Окна для Нового Интерфейса
- [x] Создать новое окно интерфейса с использованием PyQt, которое подключается к базе данных для получения информации о тайтлах.
- [x] Добавить в интерфейс отображение тайтлов и эпизодов из базы данных.

### 5.2 Переход к Новому Интерфейсу
- [x] Перенести логику отправки запросов в новый интерфейс.
- [x] Постепенно заменить старый интерфейс на новый, используя данные из базы.

### Этап 6: Дополнительные Улучшения и Оптимизация
### 6.1 разнести логику
- [ ] распилить qt/app.py , возможно часть логики можно оптимизировать
- [ ] возможно стоит вынести сохранение в бд



## Этап 7: Дополнительные Улучшения и Оптимизация
### 7.1 Оптимизация Работы с Датами
- [x] Добавить проверку на устаревшие данные (`last_updated`) для постеров и тайтлов, чтобы при необходимости загружать их заново.

### 7.2 Обработка Ошибок и Резервное Копирование
- [ ] Реализовать обработку ошибок при взаимодействии с базой данных, чтобы избежать потери данных.
- [ ] Добавить функциональность для резервного копирования базы данных.

### 7.3 Улучшение Интерфейса
- [ ] Добавить отображение истории просмотра и рейтингов тайтлов в новом интерфейсе.
- [ ] Реализовать возможность пользователю отмечать просмотренные эпизоды и добавлять рейтинг.

## Этап 9: Тестирование и Оптимизация
### 9.1 Тестирование Методов `DatabaseManager`
- [ ] Написать юнит-тесты для каждого метода `DatabaseManager` (создание, чтение, обновление, удаление данных).
- [ ] Тестировать работу с базой данных на корректность добавления и получения данных.

### 9.2 Тестирование Интеграции
- [ ] Тестировать взаимодействие базы данных с остальным приложением, чтобы убедиться в правильности логики сохранения и загрузки данных.
- [ ] Тестировать новый интерфейс, чтобы проверить отображение данных и правильность работы функционала.

