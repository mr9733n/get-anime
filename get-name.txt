get_anime app 2.0.0

1. **Рефакторинг API вызовов:**
   - [*] Создать отдельный класс или модуль для работы с API.
   - [*] Унифицировать обработку ответов API и ошибок.

2. **Улучшение структуры проекта:**
   - [*] Разделить код на модули, переместив вспомогательные классы в отдельные файлы.
   - [*] Использовать объектно-ориентированные подходы для повышения читаемости и повторного использования кода.

3. **Оптимизация работы с файлами и директориями:**
   - [*] Использовать `os.path.join` для построения путей, обеспечивая кроссплатформенность.
   - [*] Проверять и создавать необходимые директории один раз при старте приложения.
   - [ ] Использовать контекстные менеджеры (`with` statement) для работы с файлами.

4. **Улучшение логирования:**
   - [*] Настроить логирование через конфигурационный файл.
   - [ ] Логировать исключения с полным трейсбеком для упрощения отладки.
   - [*] Устранить дублирование логов и вывода в консоль, выбирая единый метод вывода информации.

5. **Обработка ошибок и исключений:**
   - [ ] Создать пользовательские исключения для специфичных ситуаций.
   - [ ] Использовать более конкретные типы исключений вместо общего `Exception`.
   - [ ] Улучшить сообщения об ошибках для информативности и понятности пользователю.

6. **Оптимизация работы с GUI:**
   - [ ] Создать классы для групп компонентов интерфейса для улучшения структуры.
   - [ ] Избежать использования глобальных переменных, передавая данные через аргументы или атрибуты класса.
   - [ ] Рассмотреть использование современных библиотек для GUI, таких как `PyQt` или `tkinter.ttk`.

7. **Улучшение работы с изображениями:**
   - [*] Кэшировать изображения в памяти вместо записи ссылок в файл.
   - [*] Оптимизировать загрузку изображений, используя фоновые потоки.
   - [ ] Обрабатывать ошибки при загрузке изображений и отображать плейсхолдер при неудаче.

8. **Повышение производительности:**
   - [*] Перейти на асинхронные запросы с использованием `asyncio` и `aiohttp`.
   - [*] Оптимизировать операции с большими объемами данных, используя многопоточность или асинхронность.

9. **Соответствие стандартам кодирования:**
   - [ ] Следовать рекомендациям PEP 8 для улучшения читаемости кода.
   - [ ] Добавить подсказки типов (type hints) для функций и методов.

10. **Улучшение пользовательского опыта:**
    - [ ] Добавить обработку событий клавиатуры (например, запуск поиска по нажатию Enter).
    - [ ] Ввести индикаторы загрузки для отображения процесса получения данных.
    - [ ] Сохранять состояние приложения между сессиями (выбранное качество, последний запрос).

11. **Международная поддержка:**
    - [ ] Реализовать возможность смены языка интерфейса через файлы локализации.
    - [ ] Обеспечить корректную работу с различными кодировками данных.

12. **Безопасность:**
    - [ ] Проверять и валидировать данные, полученные из внешних источников.
    - [ ] Использовать безопасные методы запуска внешних приложений, избегая возможных уязвимостей.

13. **Документация и комментарии:**
    - [ ] Добавить docstrings для классов и методов, описывая их назначение и использование.
    - [ ] Обновить и поддерживать актуальность комментариев в коде.

14. **Тестирование:**
    - [ ] Разработать модульные тесты с использованием `unittest` или `pytest`.
    - [ ] Тестировать приложение на различные сценарии использования и обрабатывать возможные ошибки.

15. **Использование современных библиотек:**
    - [ ] Рассмотреть возможность использования `asyncio` для улучшения асинхронности приложения.
    - [ ] Обновить используемые библиотеки до последних стабильных версий, проверяя совместимость.

16. **Оптимизация работы с сетью:**
    - [ ] Реализовать повторные попытки при неудачных сетевых запросах с использованием экспоненциальной задержки.
    - [ ] Кэшировать результаты часто запрашиваемых данных для снижения нагрузки на сеть.

17. **Улучшение работы с конфигурацией:**
    - [ ] Использовать более гибкие форматы конфигурации, такие как YAML или JSON.
    - [ ] Валидировать настройки при загрузке и уведомлять пользователя об ошибках в конфигурации.

18. **Обработка больших данных:**
    - [ ] Реализовать пагинацию результатов в интерфейсе для удобства пользователя.
    - [ ] Загружать данные по мере необходимости, используя асинхронные вызовы.

19. **Совместимость:**
    - [ ] Проверить работу приложения на различных версиях Python.
    - [ ] Обеспечить корректную работу на разных операционных системах (Windows, macOS, Linux).

20. **Пользовательские настройки:**
    - [ ] Добавить в интерфейс возможность изменения настроек (пути к программам, качество видео и т.д.).
    - [ ] Сохранять пользовательские настройки и восстанавливать их при запуске приложения.

