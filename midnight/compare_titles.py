import os
import re
import io
import sys

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from core.tables import Title, Poster


ROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
base_dir = os.path.join(ROOT_DIR, "midnight")
log_path = os.path.join(ROOT_DIR, "logs")
FILE_PATH = os.path.join(log_path, "title_ids.txt")
RESULT_PATH = os.path.join(log_path, "compare_result.txt")
build_dir = os.path.join(ROOT_DIR, 'dist/AnimePlayer')
db_dir = os.path.join(build_dir, 'db')
db_path = os.path.join(db_dir, 'anime_player.db')
DATABASE_URL = f"sqlite:///{db_path}"


def read_file_title_ids_with_posters(file_path):
    """
    –°—á–∏—Ç—ã–≤–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∏ –ø—É—Ç–∏ –ø–æ—Å—Ç–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞.
    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç:
      "https://anilibria.tv/release/zenshuu.html -> 9874 -> poster_name.jpg"
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {title_id: poster_path}
    """
    title_ids_with_posters = {}
    if not os.path.exists(file_path):
        print(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return title_ids_with_posters

    with open(file_path, "r", encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if not line:
                continue
            if "->" in line:
                parts = line.split("->")
                if len(parts) >= 3:
                    title_id_part = parts[1].strip()
                    poster_path = parts[2].strip()
                    match = re.search(r'\d+', title_id_part)
                    if match:
                        tid_str = match.group(0)
                        try:
                            tid = int(tid_str)
                            title_ids_with_posters[tid] = poster_path
                        except ValueError:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å {tid_str} –≤ —á–∏—Å–ª–æ")
                    else:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∏—Å–ª–æ–≤–æ–π ID –≤ —Å—Ç—Ä–æ–∫–µ: {line}")

    return title_ids_with_posters


def get_db_posters_info(database_url):
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ Title
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {title_id: poster_path_original}
    """
    engine = create_engine(database_url)
    Session = sessionmaker(bind=engine)
    session = Session()
    db_posters = {}
    try:
        results = session.query(Title.title_id, Title.poster_path_original).all()
        for tid, poster_path in results:
            if poster_path:
                match = re.search(r'([^/]+)$', poster_path)
                if match:
                    db_posters[tid] = match.group(1)
                else:
                    db_posters[tid] = poster_path
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", e)
    finally:
        session.close()
    return db_posters


def check_titles_without_posters(database_url):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ —Ç–∞–π—Ç–ª—ã –Ω–µ –∏–º–µ—é—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–µ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (title_id, code, name_en)
    """
    engine = create_engine(database_url)
    Session = sessionmaker(bind=engine)
    session = Session()
    missing_posters = []

    try:
        query = session.query(
            Title.title_id,
            Title.code,
            Title.name_en
        ).outerjoin(
            Poster,
            Title.title_id == Poster.title_id
        ).filter(
            Poster.poster_id == None
        )
        missing_posters = [(title.title_id, title.code, title.name_en) for title in query.all()]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–π—Ç–ª–æ–≤ –±–µ–∑ –ø–æ—Å—Ç–µ—Ä–æ–≤: {e}")
    finally:
        session.close()

    return missing_posters


def extract_title_id_from_poster_path(poster_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç title_id –∏–∑ –ø—É—Ç–∏ –∫ –ø–æ—Å—Ç–µ—Ä—É.
    Args:
        poster_path (str): –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–æ—Å—Ç–µ—Ä—É
    Returns:
        int or None: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π title_id –∏–ª–∏ None, –µ—Å–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
    """
    if not poster_path:
        return None
    path_parts = poster_path.split('/')
    for part in reversed(path_parts):
        try:
            potential_title_id = int(part)
            return potential_title_id
        except ValueError:
            continue
    return None


def verify_poster_path_title_id(database_url):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ title_id –≤ –ø—É—Ç–∏ –ø–æ—Å—Ç–µ—Ä–∞ —Å actual title_id.

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π, –≥–¥–µ –∫–ª—é—á - title_id –∏–∑ –±–∞–∑—ã,
              –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - title_id –∏–∑ –ø—É—Ç–∏ –ø–æ—Å—Ç–µ—Ä–∞
    """
    engine = create_engine(database_url)
    Session = sessionmaker(bind=engine)
    session = Session()
    mismatched_ids = {}
    try:
        results = session.query(Title.title_id, Title.poster_path_original).filter(
            Title.poster_path_original.isnot(None)).all()

        for db_title_id, poster_path in results:
            if poster_path:
                extracted_title_id = extract_title_id_from_poster_path(poster_path)

                if extracted_title_id is not None and extracted_title_id != db_title_id:
                    mismatched_ids[db_title_id] = extracted_title_id

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—É—Ç–µ–π –ø–æ—Å—Ç–µ—Ä–æ–≤: {e}")
    finally:
        session.close()
    return mismatched_ids


def main():
    output = io.StringIO()
    original_stdout = sys.stdout

    try:
        sys.stdout = output

        file_data = read_file_title_ids_with_posters(FILE_PATH)
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–æ {len(file_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ñ–∞–π–ª–∞")
        db_data = get_db_posters_info(DATABASE_URL)
        print(f"üóÑÔ∏è –ü–æ–ª—É—á–µ–Ω–æ {len(db_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

        file_ids = set(file_data.keys())
        db_ids = set(db_data.keys())
        in_file_not_db = file_ids - db_ids
        in_db_not_file = db_ids - file_ids

        print("\nüìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤:")
        print(f"‚úñ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤ —Ñ–∞–π–ª–µ, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ –±–∞–∑–µ:     {sorted(in_file_not_db)}")
        print(f"‚úñ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤ –±–∞–∑–µ, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ —Ñ–∞–π–ª–µ:     {sorted(in_db_not_file)}")

        mismatches = verify_poster_path_title_id(DATABASE_URL)

        if mismatches:
            print(f"\n‚ùó –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è title_id –≤ –ø—É—Ç–∏ –ø–æ—Å—Ç–µ—Ä–∞:")
            for db_title_id, path_title_id in mismatches.items():
                print(f"   ‚óÜ –í –±–∞–∑–µ: {db_title_id}, –í –ø—É—Ç–∏ –ø–æ—Å—Ç–µ—Ä–∞: {path_title_id}")
        else:
            print(f"\n‚úÖ –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π title_id –≤ –ø—É—Ç–∏ –ø–æ—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        common_ids = file_ids.intersection(db_ids)
        different_posters = []
        same_posters = []

        for tid in common_ids:
            file_poster = file_data[tid]
            db_poster = db_data[tid]
            if file_poster != db_poster:
                different_posters.append((tid, file_poster, db_poster))
            else:
                same_posters.append(tid)

        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–µ—Ä–æ–≤:")
        print(f"   ‚úì –¢–∞–π—Ç–ª—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –ø–æ—Å—Ç–µ—Ä–∞–º–∏:     {len(same_posters)}")
        print(f"   ‚úó –¢–∞–π—Ç–ª—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Å—Ç–µ—Ä–∞–º–∏:         {len(different_posters)}")

        if different_posters:
            print("\n‚ùó –¢–∞–π—Ç–ª—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Å—Ç–µ—Ä–∞–º–∏:")
            for i, (tid, file_poster, db_poster) in enumerate(different_posters):
                print(f"   ‚óÜ {tid}: –§–∞–π–ª: {file_poster}, –ë–î: {db_poster}")

        missing_posters = check_titles_without_posters(DATABASE_URL)
        print(f"\n‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–π—Ç–ª–æ–≤ –±–µ–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–µ—Ä–æ–≤: {len(missing_posters)}")

        if missing_posters:
            print("\n‚ùå –¢–∞–π—Ç–ª—ã –±–µ–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–µ—Ä–æ–≤:")
            for i, (title_id, title_code, title_name) in enumerate(missing_posters):
                print(f"   ‚óÜ {title_id}: {title_code} - {title_name}")

            missing_title_ids = [title_id for title_id, _, _ in missing_posters]
            print(f"\nüìù –°–ø–∏—Å–æ–∫ title_id –±–µ–∑ –ø–æ—Å—Ç–µ—Ä–æ–≤:")
            print(f"   {sorted(missing_title_ids)}")

        sys.stdout = original_stdout

        result_text = output.getvalue()
        with open(RESULT_PATH, 'w', encoding='utf-8') as f:
            f.write(result_text)

        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {RESULT_PATH}")

    except Exception as e:
        sys.stdout = original_stdout
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        output.close()


if __name__ == "__main__":
    main()
