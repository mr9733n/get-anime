# runtime_manager.py
import ctypes
import sys
import os
import subprocess

from PyQt5.QtCore import QObject, pyqtSignal, Qt, QRunnable, QThreadPool, QTimer, QFileSystemWatcher
from PyQt5.QtWidgets import QVBoxLayout, QTextEdit, QPushButton, QLabel, QWidget


def test_exception():
    ctypes.string_at(0)
    raise Exception("TEST EXCEPTION...")

def restart_application():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —É—á–∏—Ç—ã–≤–∞—è, —Å–∫—Ä–∏–ø—Ç —ç—Ç–æ –∏–ª–∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π .exe/.app"""
    try:
        python_exec = sys.executable  # –ü—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É

        if getattr(sys, 'frozen', False):  # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ (PyInstaller)
            subprocess.Popen([python_exec] + sys.argv)  # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            os._exit(0)  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        else:  # –û–±—ã—á–Ω—ã–π Python-—Å–∫—Ä–∏–ø—Ç
            os.execl(python_exec, python_exec, *sys.argv)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")

class LogWorkerSignals(QObject):
    """–°–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞."""
    logLoaded = pyqtSignal(str)  # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–µ–∫—Å—Ç–∞ –ª–æ–≥–æ–≤ –≤ UI

class LogWorker(QRunnable):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤ –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    def __init__(self, log_file):
        super().__init__()
        self.log_file = log_file
        self.signals = LogWorkerSignals()  # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã

    def run(self):
        """–ß–∏—Ç–∞–µ—Ç –ª–æ–≥-—Ñ–∞–π–ª –≤ —Ñ–æ–Ω–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ UI-–ø–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª."""
        try:
            with open(self.log_file, "r", encoding="utf-8") as f:
                lines = f.readlines()
            reversed_logs = "".join(lines[::-1])  # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—Ç—Ä–æ–∫
            self.signals.logLoaded.emit(reversed_logs)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ UI
        except Exception as e:
            self.signals.logLoaded.emit(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤: {e}")

class LogWindow(QWidget):
    closed = pyqtSignal()

    def __init__(self, log_file, theme="default"):
        super().__init__()
        self.log_file = log_file
        self.thread_pool = QThreadPool.globalInstance()  # –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
        self.setWindowTitle("Anime Player App Logs.")
        self.setGeometry(100, 100, 800, 600)

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        layout = QVBoxLayout()

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        self.log_view = QTextEdit(self)
        self.log_view.setReadOnly(True)
        self.log_view.setAlignment(Qt.AlignTop)  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–≤–µ—Ä—Ö—É

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤
        self.refresh_button = QPushButton("UPDATE")
        self.refresh_button.clicked.connect(self.load_logs)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        self.info_label = QLabel("‚ö° Auto-updates every 60 seconds. üìú Newest logs appear first.")
        self.info_label.setAlignment(Qt.AlignCenter)

        # –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤ (–∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥)
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.load_logs)
        self.timer.start(60000)

        # –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞
        self.file_watcher = QFileSystemWatcher()
        self.file_watcher.addPath(self.log_file)
        self.file_watcher.fileChanged.connect(self.load_logs)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        self.apply_theme(theme)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        self.load_logs()

        layout.addWidget(self.log_view)
        layout.addWidget(self.refresh_button)
        layout.addWidget(self.info_label)
        self.setLayout(layout)

    def load_logs(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –ª–æ–≥–æ–≤."""
        worker = LogWorker(self.log_file)
        worker.signals.logLoaded.connect(self.update_log_view)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –∫ UI-–º–µ—Ç–æ–¥—É
        self.thread_pool.start(worker)

    def update_log_view(self, log_text):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –ª–æ–≥–æ–≤ –≤ UI-–ø–æ—Ç–æ–∫–µ."""
        self.log_view.setPlainText(log_text)
        self.log_view.verticalScrollBar().setValue(0)  # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –Ω–∞–≤–µ—Ä—Ö

    def apply_theme(self, theme):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏ –∫ –æ–∫–Ω—É –ª–æ–≥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∞–±–ª–æ–Ω–∞"""
        if theme == "default":
            self.setStyleSheet("""
                QWidget {
                    background-color: rgba(240, 240, 240, 1.0);
                }
                QTextEdit {
                    background-color: white;
                    color: black;
                    font-family: Consolas, monospace;
                    font-size: 12px;
                }
                QPushButton {
                    background-color: #4a4a4a;
                    color: white;
                    border-radius: 6px;
                    padding: 8px;
                }
                QPushButton:hover {
                    background-color: #5c5c5c;
                }
            """)
        elif theme == "no_background_night":
            self.setStyleSheet("""
                QWidget {
                    background-color: rgba(140, 140, 140, 1.0);
                }
                QTextEdit {
                    background-color: black;
                    color: lime;
                    font-family: Consolas, monospace;
                    font-size: 12px;
                    border: 1px solid gray;
                }
                QPushButton {
                    background-color: #2a2a2a;
                    color: white;
                    border-radius: 6px;
                    padding: 8px;
                }
                QPushButton:hover {
                    background-color: #3a3a3a;
                }
            """)
        elif theme == "no_background":
            self.setStyleSheet("""
                QWidget {
                    background-color: rgba(220, 220, 220, 1.0);
                }
                QTextEdit {
                    background-color: white;
                    color: black;
                    font-family: Consolas, monospace;
                    font-size: 12px;
                }
                QPushButton {
                    background-color: #6a6a6a;
                    color: white;
                    border-radius: 6px;
                    padding: 8px;
                }
                QPushButton:hover {
                    background-color: #7a7a7a;
                }
            """)

    def set_theme(self, new_theme):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –º–µ–Ω—è—Ç—å —Ç–µ–º—É –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"""
        self.apply_theme(new_theme)

    def closeEvent(self, event):
        """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –∏ –∏—Å–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª."""
        self.closed.emit()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª, —á—Ç–æ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã–ª–æ—Å—å
        event.accept()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ